#!/bin/bash
# shellcheck disable=SC2154
checkDpkg() {
  i=0
  while fuser /var/lib/dpkg/lock >/dev/null 2>&1 ; do
    case $((i % 4)) in
      0 ) j="-" ;;
      1 ) j="\\" ;;
      2 ) j="|" ;;
      3 ) j="/" ;;
    esac
    echo -en "\r[$j] Waiting for other software managers to finish... "
    sleep 1
    ((i=i+1))
  done
  echo -en "Done\n"
}

checkRoot() {
  if [[ "$1" == "checksudo" ]] && command -v sudo > /dev/null 2>&1; then
    echo "true" #Return true if sudo exists
  elif [[ "$1" == "silent" ]] && [[ "$USER" == "root" ]]; then
    echo "true" #Return true silently if user is root and silence requested
  elif [[ "$1" != "silent" ]] && [[ "$1" != "checksudo" ]] && [[ "$USER" != "root" ]]; then
    sendError "  ATTENTION: Insufficient permission, $1" 1>&2; exit 1 #Exit with an error if user isn't root
  else
    echo "false" #Exit silently if no conditions were met
  fi
}

sendError() {
  #Output $1 to stderr
  echo -e "$1" 1>&2
}

displayGraphics() {
  #Get display and user information
  if [[ "$DISPLAY" != "" ]]; then
    display="$DISPLAY"
    user="$USER"
  elif [[ -f "/tmp/kernel-notify.displayinfo" ]]; then
    declare "$(grep "display.*" /tmp/kernel-notify.displayinfo)" #Declare display
    declare "$(grep -v "display.*" /tmp/kernel-notify.displayinfo)" #Declare user
  else
    #No display available
    return 1
  fi

  for i in "$@"; do
    #Check if zenity is installed
    if [[ "$i" == "zenity" ]]; then
      if ! command -v zenity > /dev/null 2>&1; then
        sendError "Zenity not installed, it is required for graphical menus"
        return 1
      fi
    fi
    #Run command on correct display with correct user
    if [[ "$i" == "launch" ]]; then
      if [[ "$(checkRoot "checksudo")" == "true" ]]; then
        sudo -u "$user" DISPLAY="$display" DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/"$(id -u "$user")"/bus bash -c "$1"
      else
        return 1
      fi
    fi
  done
}

getLatestKernelVersion() {
  useKernelWeb() {
    latestVersion=$(curl -k https://www.kernel.org -s) #Get webpage containing latest version
    latestVersion="$(echo "$latestVersion" | tr -d '\n')" #Remove all newlines
    latestVersion="${latestVersion#*'<td id="latest_button">'}" #Remove all html before the pattern
    latestVersion="${latestVersion%%>*}" #Remove all html after the tag with the latest version
    latestVersion="${latestVersion##*/}" #Remove all html before the filename with the latest version
    latestVersion="${latestVersion/linux-}" #Remove linux- from the filename
    latestVersion="${latestVersion%.tar*}" #Remove .tar from the filename
    echo "$latestVersion"
  }
  useKernelGit() {
    latestVersion="$(git ls-remote --refs --tags --sort="v:refname" "$kernelrepourl" 2>/dev/null |grep -v "[0-9]-rc" |tail -n1)"
    echo "${latestVersion##*v}"
  }

  getKernelVersion() {
    if [[ "$1" == "web" ]]; then
      latestVersion="$(useKernelWeb)"
    else
      latestVersion="$(useKernelGit)"
    fi
    #Correct output required precision
    if [[ "$checkingprecision" == "major" ]]; then
      if [ "$(echo "$latestVersion" |tr -cd '.' |wc -c)" == "2" ]; then
        latestVersion="${latestVersion%.*}"
      fi
    fi
    echo "$latestVersion"
  }

  #Try getKernelVersion with primary method
  latestVersion="$(getKernelVersion "$primarycheckingmethod")"
  versionExists="$(checkValidKernel "$latestVersion")"
  if [[ "$versionExists" == "invalid" ]]; then
    #Try getKernelVersion with secondary method
    if [[ "$primarycheckingmethod" != "web" ]]; then
      echo -en "\nCouldn't get latest kernel version from git, trying web..." 1>&2
      latestVersion="$(getKernelVersion "web")"
    else
      echo -en "\nCouldn't get latest kernel version from web, trying git..." 1>&2
      latestVersion="$(getKernelVersion "git")"
    fi
    #Set latestVersion to x.x.x if both methods failed
    versionExists="$(checkValidKernel "$latestVersion")"
    if [[ "$versionExists" == "invalid" ]]; then
      latestVersion="x.x.x"
    fi
  fi
  echo "$latestVersion"
}

checkValidKernel() {
  checkResult="valid"
  for i in ${1//./ }; do #No group of characters can exceed a size of 3
    partCount=$((partCount + 1))
    if [[ "${#i}" != "1" ]] && [[ "${#i}" != "2" ]] && [[ "${#i}" != "3" ]]; then
      checkResult="invalid"
    fi
  done
  if [[ ! "$1" == *"."* ]]; then #Must contain a .
    checkResult="invalid"
  elif [[ "${1%%-rc*}" == *"." ]] || [[ "${1%%-rc*}" == "."* ]]; then #Mustn't end or start in a .
    checkResult="invalid"
  elif [[ "$partCount" != "2" ]] && [[ "$partCount" != "3" ]]; then #Must only have 2 or 3 parts
    checkResult="invalid"
  elif [[ "${1/-rc}" =~ [a-z] ]]; then #Mustn't contain any letters, except rc
    checkResult="invalid"
  fi
  echo "$checkResult"
}

prepareVersion() {
  version=""
  for i in ${1//./ }; do
    if [[ "$i" -lt "10" ]]; then
      version+="0$i"
    else
      version+="$i"
    fi
  done
  echo "$version"
}

sendNotification() {
  #Silence notification if program is muted
  if [[ "$muted" == "true" ]] && [[ "$5" != "silent" ]]; then
    echo "$1, $2"
  else
    #Decide whether or not to set configured priority
    if [[ "$3" == "kernel" ]] || [[ "$3" == "program" ]] || [[ "$4" == "mute" ]]; then
      displayPriority="$priority"
    fi
    #Check notifications code exists before running
    if [[ -f "$workDir/notifications" ]]; then
      if ! displayGraphics "$workDir/notifications \"$1\" \"$2\" \"kernel-notify-tux\" \"$3\" \"$4\" \"$displayPriority\" > /dev/null 2>&1 &" "launch" && [[ "$5" != "silent" ]]; then
        echo "  Info: $1, $2"
      fi
    elif [[ "$5" != "silent" ]]; then
      echo "  Info: $1, $2"
    fi
  fi
}

#Set a variable for the currently installed kernels
getKernelList() {
  #Exit with error if unsupported
  if cat /etc/*-release |grep -q Raspbian 2>&1 || [[ ! -d "/boot" ]]; then return 1; fi

  #Get list of installed kernels
  kernelList="$(ls /boot/vmlinuz-*)"
  kernelList="${kernelList//'/boot/'}"
  kernelList="${kernelList//vmlinuz-}"
  kernelList="${kernelList//-generic}"
  kernelList="$(echo "$kernelList" |sort -V)"

  [[ "$kernelList" == "" ]] && return 1
  echo "$kernelList" |tr "\n" " "
}

displayKernels() {
  read -ra kernelList <<< "$(getKernelList)"
  #Display the list of kernels if not blank
  if [[ "${kernelList[*]}" == "" ]]; then
    sendError "Error while looking for kernels"
  else
    echo "Currently installed kernels:"
    echo "${kernelList[*]}" |tr " " "\n" |cat -n
    if [[ "$kernelcountwarning" == "true" ]] && [[ "$1" != "minimal" ]]; then
      echo "Config set to keep $maxkernelcount kernels before notifying users"
    fi
  fi
}

warnKernelCount() {
  read -ra kernelList <<< "$(getKernelList)"
  #Split into an array and warn if the length is longer than the configured limit
  read -ra ARR <<< "$(echo "${kernelList[*]}" |tr "\n" " ")"
  if [[ "${#ARR[@]}" > "$maxkernelcount" ]]; then
    sendNotification "Configured kernel install count reached" "Remove extra kernels with 'kernel-notify -r'" ""
    echo "Remove kernels to avoid this notification, or raise the limit in the config"
  fi
}
